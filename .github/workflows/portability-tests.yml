name: portability-tests

on:
  workflow_dispatch:

jobs:
  setup:
    name: portability-tests

    strategy:
      matrix:
        include:
          - os: ubuntu-focal
            xsd_ver: 4.0.0
            xercesc_ver: 3.2.3
            sundials_ver: 6.0.0
            boost_ver: 1.74.0
            vtk_ver: 9.1.0
            petsc_ver: 3.12.4
            hdf5_ver: 1.10.4
            petsc_arch: linux-gnu

          - os: ubuntu-focal
            xsd_ver: 4.0.0
            xercesc_ver: 3.2.0
            sundials_ver: 4.1.0
            boost_ver: 1.62.0
            vtk_ver: 6.3.0
            petsc_ver: 3.7.7
            hdf5_ver: 1.10.0-patch1
            petsc_arch: linux-gnu

      fail-fast: false

    runs-on: [self-hosted, '${{ matrix.os }}']

    defaults:
      run:
        # --login to source /etc/profile.d/modules.sh
        shell: bash --login -e -o pipefail {0}

    steps:
      - name: set env variables
        run: |
          modules_dir="${MODULES_DIR:-${HOME}/modules}"
          echo "MODULES_DIR=${modules_dir}" >> ${GITHUB_ENV}
          echo "CHASTE_TEST_OUTPUT=${HOME}/testoutput/$(date +'%Y%m%d%H%M%S')" >> ${GITHUB_ENV}
          echo "NCPU=$(( $(nproc) < 16 ? $(nproc) : 16 ))" >> ${GITHUB_ENV}

      - name: make directories
        run: |
          mkdir -p ${{ env.MODULES_DIR }}/modulefiles
          mkdir -p ${{ env.CHASTE_TEST_OUTPUT }}

      - name: create modules init script
        run: |
          echo "module purge" > modulesinit.sh
          echo "module use ${{ env.MODULES_DIR }}/modulefiles" >> modulesinit.sh
          chmod +x modulesinit.sh

      - name: setup xsd
        run: |
          . ./modulesinit.sh
          err=0 && module test xsd/${{ matrix.xsd_ver }} || err=$?
          if [ $err -ne 0 ]; then
            nice -n 10 install_xsd.sh \
              --version=${{ matrix.xsd_ver }} \
              --modules-dir=${{ env.MODULES_DIR }}
            module test xsd/${{ matrix.xsd_ver }}
          fi

      - name: setup xercesc
        run: |
          . ./modulesinit.sh
          err=0 && module test xercesc/${{ matrix.xercesc_ver }} || err=$?
          if [ $err -ne 0 ]; then
            nice -n 10 install_xercesc.sh \
              --version=${{ matrix.xercesc_ver }} \
              --modules-dir=${{ env.MODULES_DIR }} \
              --parallel=${{ env.NCPU }}
            module test xercesc/${{ matrix.xercesc_ver }}
          fi

      - name: setup sundials
        run: |
          . ./modulesinit.sh
          err=0 && module test sundials/${{ matrix.sundials_ver }} || err=$?
          if [ $err -ne 0 ]; then
            nice -n 10 install_sundials.sh \
              --version=${{ matrix.sundials_ver }} \
              --modules-dir=${{ env.MODULES_DIR }} \
              --parallel=${{ env.NCPU }}
            module test sundials/${{ matrix.sundials_ver }}
          fi

      - name: setup boost
        run: |
          . ./modulesinit.sh
          err=0 && module test boost/${{ matrix.boost_ver }} || err=$?
          if [ $err -ne 0 ]; then
            nice -n 10 install_boost.sh \
              --version=${{ matrix.boost_ver }} \
              --modules-dir=${{ env.MODULES_DIR }} \
              --parallel=${{ env.NCPU }}
            module test boost/${{ matrix.boost_ver }}
          fi

      - name: setup vtk
        run: |
          . ./modulesinit.sh
          err=0 && module test vtk/${{ matrix.vtk_ver }} || err=$?
          if [ $err -ne 0 ]; then
            nice -n 10 install_vtk.sh \
              --version=${{ matrix.vtk_ver }} \
              --modules-dir=${{ env.MODULES_DIR }} \
              --parallel=${{ env.NCPU }}
            module test vtk/${{ matrix.vtk_ver }}
          fi

      - name: setup petsc_hdf5
        run: |
          . ./modulesinit.sh
          err=0 && module test petsc_hdf5/${{ matrix.petsc_ver }}_${{ matrix.hdf5_ver }}/${{ matrix.petsc_arch }} || err=$?
          if [ $err -ne 0 ]; then
            nice -n 10 install_petsc_hdf5.sh \
              --petsc-version=${{ matrix.petsc_ver }} \
              --hdf5-version=${{ matrix.hdf5_ver }} \
              --petsc-arch=${{ matrix.petsc_arch }} \
              --modules-dir=${{ env.MODULES_DIR }} \
              --parallel=${{ env.NCPU }}
            module test petsc_hdf5/${{ matrix.petsc_ver }}_${{ matrix.hdf5_ver }}/${{ matrix.petsc_arch }}
          fi

      - name: add versions to modules init script
        run: |
          echo "module load xsd/${{ matrix.xsd_ver }}" >> modulesinit.sh
          echo "module load xercesc/${{ matrix.xercesc_ver }}" >> modulesinit.sh
          echo "module load sundials/${{ matrix.sundials_ver }}" >> modulesinit.sh
          echo "module load boost/${{ matrix.boost_ver }}" >> modulesinit.sh
          echo "module load vtk/${{ matrix.vtk_ver }}" >> modulesinit.sh
          echo "module load petsc_hdf5/${{ matrix.petsc_ver }}_${{ matrix.hdf5_ver }}/${{ matrix.petsc_arch }}" >> modulesinit.sh

      - name: checkout chaste
        uses: actions/checkout@v3
        with:
          repository: Chaste/Chaste
          path: Chaste
          submodules: recursive

      - name: configure chaste
        run: |
          . ./modulesinit.sh
          mkdir -p Chaste/build
          cd Chaste/build
          nice -n 10 cmake \
            -DBoost_NO_BOOST_CMAKE=ON \
            -DBoost_NO_SYSTEM_PATHS=ON \
            -DBOOST_ROOT=${BOOST_ROOT} \
            -DCMAKE_PREFIX_PATH="${SUNDIALS_ROOT};${VTK_ROOT};${XERCESC_ROOT};${XSD_ROOT}" \
            -DCMAKE_BUILD_TYPE=Release \
            ..

      - name: compile chaste build info
        run: |
          . ./modulesinit.sh
          cd Chaste/build
          nice -n 10 cmake --build . --parallel ${{ env.NCPU }} --target TestChasteBuildInfo
          nice -n 10 ctest -V -R TestChasteBuildInfo --output-on-failure | tee buildinfo

      - name: verify dependency versions
        run: |
          cd Chaste/build
          sed -i.bak 's/"//g' buildinfo  # removes quotes from old sundials versions

          maj_min_rev='^[0-9]\+\.[0-9]\+\.[0-9]\+'
          maj_min='^[0-9]\+\.[0-9]\+'

          xsd_ver="$(echo ${{ matrix.xsd_ver }} | grep -o ${maj_min_rev})"
          xercesc_ver="$(echo ${{ matrix.xercesc_ver }} | grep -o ${maj_min_rev})"
          sundials_ver="$(echo ${{ matrix.sundials_ver }} | grep -o ${maj_min_rev})"
          boost_ver="$(echo ${{ matrix.boost_ver }} | grep -o ${maj_min_rev})"
          vtk_ver="$(echo ${{ matrix.vtk_ver }} | grep -o ${maj_min})"
          petsc_ver="$(echo ${{ matrix.petsc_ver }} | grep -o ${maj_min_rev})"
          hdf5_ver="$(echo ${{ matrix.hdf5_ver }} | grep -o ${maj_min_rev})"

          grep "<XSD>${xsd_ver}</XSD>" buildinfo
          grep "<Xerces>${xercesc_ver}</Xerces>" buildinfo
          grep "<SUNDIALS>${sundials_ver}</SUNDIALS>" buildinfo
          grep "<Boost>${boost_ver}</Boost>" buildinfo
          grep "<VTK>${vtk_ver}</VTK>" buildinfo
          grep "<PETSc>${petsc_ver}</PETSc>" buildinfo
          grep "<HDF5>${hdf5_ver}</HDF5>" buildinfo

      - name: build core libraries
        run: |
          . ./modulesinit.sh
          cd Chaste/build
          nice -n 10 cmake --build . --parallel ${{ env.NCPU }} --target chaste_core

      - name: build cell_based
        run: |
          . ./modulesinit.sh
          cd Chaste/build
          nice -n 10 cmake --build . --parallel ${{ env.NCPU }} --target chaste_cell_based

      - name: build crypt
        run: |
          . ./modulesinit.sh
          cd Chaste/build
          nice -n 10 cmake --build . --parallel ${{ env.NCPU }} --target chaste_crypt

      - name: build heart
        run: |
          . ./modulesinit.sh
          cd Chaste/build
          nice -n 10 cmake --build . --parallel ${{ env.NCPU }} --target chaste_heart

      - name: build lung
        run: |
          . ./modulesinit.sh
          cd Chaste/build
          nice -n 10 cmake --build . --parallel ${{ env.NCPU }} --target chaste_lung

      - name: build continuous test pack
        run: |
          . ./modulesinit.sh
          cd Chaste/build
          nice -n 10 cmake --build . --parallel ${{ env.NCPU }} --target Continuous

      - name: build parallel test pack
        run: |
          . ./modulesinit.sh
          cd Chaste/build
          nice -n 10 cmake --build . --parallel ${{ env.NCPU }} --target Parallel

      - name: build nightly test pack
        run: |
          . ./modulesinit.sh
          cd Chaste/build
          nice -n 10 cmake --build . --parallel ${{ env.NCPU }} --target Nightly

      - name: run continuous test pack
        run: |
          . ./modulesinit.sh
          cd Chaste/build
          nice -n 10 ctest -j ${{ env.NCPU }} -L Continuous --output-on-failure

      - name: run parallel test pack
        run: |
          . ./modulesinit.sh
          cd Chaste/build
          nice -n 10 ctest -j ${{ env.NCPU }} -L Parallel --output-on-failure

      - name: run nightly test pack
        run: |
          . ./modulesinit.sh
          cd Chaste/build
          nice -n 10 ctest -j ${{ env.NCPU }} -L Nightly --output-on-failure

      - name: cleanup
        if: always()
        run: rm -rf ${{ env.MODULES_DIR }}/src/*
