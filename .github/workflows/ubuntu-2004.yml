name: Ubuntu 20.04 Chaste Dependency Modules test suite

on:
  workflow_dispatch:

jobs:
  
  setup:
    name: Setup for Ubuntu 20.04
    runs-on: ubuntu-20.04
    
    defaults:
      run:
        shell: bash --login -e -o pipefail {0}
        
    env:
      MODULES_DIR: ${{ github.workspace }}/modules
      CHASTE_TEST_OUTPUT: ${{ github.workspace }}/chaste-test-dir
      XSD_VER: 4.0.0
      XERCESC_VER: 3.2.1
      SUNDIALS_VER: 4.1.0
      BOOST_VER: 1.69.0
      VTK_VER: 8.1.1
      PETSC_VER: 3.9.4
      PETSC_LBL: linux-gnu
      HDF5_VER: 1.10.3
      
    steps:
      - name: Get Ubuntu version
        run: echo 'OS_VERSION="'$(grep -m 1 PRETTY_NAME /etc/os-release | cut -d'"' -f 2)'"' >> $GITHUB_ENV
        
      - name: Checkout Chaste/dependency-modules repository
        uses: actions/checkout@v3
        with:
          repository: Chaste/dependency-modules
          path: dependency-modules
        
      - name: Install required packages
        working-directory: dependency-modules/scripts
        run: sudo ./setup_ubuntu2004.sh

      - name: Setup modules directory
        run: |
          mkdir -p ${MODULES_DIR}/modulefiles
          echo "module use ${MODULES_DIR}/modulefiles" | sudo tee -a /etc/profile.d/modules.sh
          source /etc/profile.d/modules.sh 
          module avail
          
      #===== XSD
      - name: Install xsd module
        working-directory: dependency-modules/scripts
        run: |
          ./install_xsd.sh --version=${XSD_VER} --modules-dir=${MODULES_DIR}
          
      - name: Check xsd module
        run: |
          module load xsd/${XSD_VER}
          test ${XSD_ROOT} = ${MODULES_DIR}/opt/xsd/${XSD_VER} || exit 1
          test -d ${XSD_ROOT}/bin || exit 2
          test -d ${XSD_ROOT}/libxsd || exit 3
          
      #===== XERCESC
      - name: Cache xercesc module
        id: cache-xercesc
        uses: actions/cache@v3
        with:
          path: |
            ${MODULES_DIR}/opt/xercesc/${XERCESC_VER}
            ${MODULES_DIR}/modulefiles/xercesc/${XERCESC_VER}
          key: ${{ env.OS_VERSION }}-xercesc-${{ env.XERCESC_VER }}-${{ hashFiles('dependency-modules/scripts/install_xercesc.sh') }}
      
      - name: Build and install xercesc module
        if: steps.cache-xercesc.outputs.cache-hit != 'true'
        working-directory: dependency-modules/scripts
        run: |
          ./install_xercesc.sh --version=${XERCESC_VER} --modules-dir=${MODULES_DIR}
          
      - name: Check xercesc module
        run: |
          module load xercesc/${XERCESC_VER}
          test ${XERCESCROOT} = ${MODULES_DIR}/opt/xercesc/${XERCESC_VER} || exit 1
          test -d ${XERCESCROOT}/bin || exit 2
          test -d ${XERCESCROOT}/include || exit 3
          test -d ${XERCESCROOT}/lib || exit 4
          
      #===== SUNDIALS
      - name: Cache sundials module
        id: cache-sundials
        uses: actions/cache@v3
        with:
          path: |
            ${MODULES_DIR}/opt/sundials/${SUNDIALS_VER}
            ${MODULES_DIR}/modulefiles/sundials/${SUNDIALS_VER}
          key: ${{ env.OS_VERSION }}-sundials-${{ env.SUNDIALS_VER }}-${{ hashFiles('dependency-modules/scripts/install_sundials.sh') }}
      
      - name: Build and install sundials module
        if: steps.cache-sundials.outputs.cache-hit != 'true'
        working-directory: dependency-modules/scripts
        run: |
          ./install_sundials.sh --version=${SUNDIALS_VER} --modules-dir=${MODULES_DIR}
          
      - name: Check sundials module
        run: |
          module load sundials/${SUNDIALS_VER}
          test ${SUNDIALS_ROOT} = ${MODULES_DIR}/opt/sundials/${SUNDIALS_VER} || exit 1
          test -d ${SUNDIALS_ROOT}/include || exit 2
          test -d ${SUNDIALS_ROOT}/lib || exit 3
          
      #===== BOOST
      - name: Cache boost module
        id: cache-boost
        uses: actions/cache@v3
        with:
          path: |
            ${MODULES_DIR}/opt/boost/${BOOST_VER}
            ${MODULES_DIR}/modulefiles/boost/${BOOST_VER}
          key: ${{ env.OS_VERSION }}-boost-${{ env.BOOST_VER }}-${{ hashFiles('dependency-modules/scripts/install_boost.sh') }}
      
      - name: Build and install boost module
        if: steps.cache-boost.outputs.cache-hit != 'true'
        working-directory: dependency-modules/scripts
        run: |
          ./install_boost.sh --version=${BOOST_VER} --modules-dir=${MODULES_DIR}
          
      - name: Check boost module
        run: |
          module load boost/${BOOST_VER}
          test ${BOOST_ROOT} = ${MODULES_DIR}/opt/boost/${BOOST_VER} || exit 1
          test -d ${BOOST_ROOT}/include || exit 2
          test -d ${BOOST_ROOT}/lib || exit 3
          
      #===== VTK
      - name: Cache vtk module
        id: cache-vtk
        uses: actions/cache@v3
        with:
          path: |
            ${MODULES_DIR}/opt/vtk/${VTK_VER}
            ${MODULES_DIR}/modulefiles/vtk/${VTK_VER}
          key: ${{ env.OS_VERSION }}-vtk-${{ env.VTK_VER }}-${{ hashFiles('dependency-modules/scripts/install_vtk.sh') }}
      
      - name: Build and install vtk module
        if: steps.cache-vtk.outputs.cache-hit != 'true'
        working-directory: dependency-modules/scripts
        run: |
          ./install_vtk.sh --version=${VTK_VER} --modules-dir=${MODULES_DIR}
          
      - name: Check vtk module
        run: |
          module load vtk/${VTK_VER}
          test ${VTK_ROOT} = ${MODULES_DIR}/opt/vtk/${VTK_VER} || exit 1
          test -d ${VTK_ROOT}/bin || exit 2
          test -d ${VTK_ROOT}/include || exit 3
          test -d ${VTK_ROOT}/lib || exit 4
        
      #===== PETSC + HDF5
      - name: Cache petsc_hdf5 module
        id: cache-petsc_hdf5
        uses: actions/cache@v3
        with:
          path: |
            ${MODULES_DIR}/opt/petsc_hdf5/${PETSC_VER}_${HDF5_VER}
            ${MODULES_DIR}/modulefiles/petsc_hdf5/${PETSC_VER}_${HDF5_VER}/${PETSC_LBL}
          key: ${{ env.OS_VERSION }}-petsc_hdf5-${{ env.PETSC_VER }}-${{ env.HDF5_VER }}-${{ env.PETSC_LBL }}-${{ hashFiles('dependency-modules/scripts/install_petsc_hdf5.sh') }}
      
      - name: Build and install petsc_hdf5 module
        if: steps.cache-petsc_hdf5.outputs.cache-hit != 'true'
        working-directory: dependency-modules/scripts
        run: |
          ./install_petsc_hdf5.sh --petsc-version=${PETSC_VER} --hdf5-version=${HDF5_VER} --petsc-arch=${PETSC_LBL} --modules-dir=${MODULES_DIR}

      - name: Check petsc_hdf5 module
        run: |
          module load petsc_hdf5/${PETSC_VER}_${HDF5_VER}/${PETSC_LBL}
          test ${PETSC_DIR} = ${MODULES_DIR}/opt/petsc_hdf5/${PETSC_VER}_${HDF5_VER} || exit 1
          test ${PETSC_ARCH} = ${PETSC_LBL} || exit 2
          test -d ${PETSC_DIR}/${PETSC_ARCH}/bin || exit 3
          test -d ${PETSC_DIR}/${PETSC_ARCH}/include || exit 4
          test -d ${PETSC_DIR}/${PETSC_ARCH}/lib || exit 5
          test -f ${PETSC_DIR}/${PETSC_ARCH}/lib/libhdf5.so || exit 6
          test -f ${PETSC_DIR}/${PETSC_ARCH}/lib/libmpi.so || exit 7
          test -f ${PETSC_DIR}/${PETSC_ARCH}/lib/libparmetis.so || exit 8
          test -f ${PETSC_DIR}/${PETSC_ARCH}/lib/libpetsc.so || exit 9
          test $(which h5pcc) = ${PETSC_DIR}/${PETSC_ARCH}/bin/h5pcc || exit 10
          test $(which mpicc) = ${PETSC_DIR}/${PETSC_ARCH}/bin/mpicc || exit 11
          
      #===== CHASTE
      - name: Checkout Chaste repository
        uses: actions/checkout@v3
        with:
          repository: Chaste/Chaste
          path: Chaste
          submodules: recursive
          
      - name: Make build and test directories
        run: |
          mkdir -p Chaste/build
          mkdir -p ${CHASTE_TEST_OUTPUT}
      
      - name: Configure Chaste
        working-directory: Chaste/build
        run: |
          module purge
          module load xsd/${XSD_VER}
          module load xercesc/${XERCESC_VER}
          module load sundials/${SUNDIALS_VER}
          module load boost/${BOOST_VER}
          module load vtk/${VTK_VER}
          module load petsc_hdf5/${PETSC_VER}_${HDF5_VER}/${PETSC_LBL}
          cmake -DCMAKE_BUILD_TYPE=Release ..
      
      - name: Compile build info
        working-directory: Chaste/build
        run: cmake --build . --parallel $(nproc) --target TestChasteBuildInfo

      - name: Get build info
        working-directory: Chaste/build
        run: |
          ctest -j $(nproc) -V -R TestChasteBuildInfo --output-on-failure | tee buildinfo
          sed -i.bak 's/"//g' buildinfo  # removes quotes from some sundials versions

      - name: Check build info
        working-directory: Chaste/build
        run: |
          grep "<XSD>${XSD_VER}</XSD>" buildinfo || exit 1
          grep "<Xerces>${XERCESC_VER}</Xerces>" buildinfo || exit 2
          grep "<SUNDIALS>${SUNDIALS_VER}</SUNDIALS>" buildinfo || exit 3
          grep "<Boost>${BOOST_VER}</Boost>" buildinfo || exit 4
          vtk_arr=(${VTK_VER//\./ })
          vtk_major=${vtk_arr[0]}
          vtk_minor=${vtk_arr[1]}
          grep "<VTK>${vtk_major}.${vtk_minor}</VTK>" buildinfo || exit 5
          grep "<PETSc>${PETSC_VER}</PETSc>" buildinfo || exit 6
          grep "<HDF5>${HDF5_VER}</HDF5>" buildinfo || exit 7
