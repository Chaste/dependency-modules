name: portability-action
description: portability testing action

inputs:
  xsd_ver:
    description: xsd version
    required: true
  xercesc_ver:
    description: xercesc version
    required: true
  sundials_ver:
    description: sundials version
    required: false
  boost_ver:
    description: boost version
    required: true
  vtk_ver:
    description: vtk version
    required: false
  petsc_ver:
    description: petsc version
    required: true
  petsc_arch:
    description: petsc arch
    required: true
  hdf5_ver:
    description: hdf5 version
    required: true
  modules_dir:
    description: base directory for environment modules
    required: false
  max_cpu:
    description: max number of parallel processes
    required: false
    default: '16'
  niceness:
    description: niceness priority
    required: false
    default: '10'
  

runs:
  using: composite
  steps:
    - name: Set environment variables
      run: |
        if [ -z "${{ inputs.modules_dir }}" ]; then
          echo "modules_dir=${HOME}/modules" >> ${GITHUB_ENV}
        else
          echo "modules_dir=${{ inputs.modules_dir }}" >> ${GITHUB_ENV}
        fi
        echo "parallel=$(( $(nproc) < ${{ inputs.max_cpu }} ? $(nproc) : ${{ inputs.max_cpu }} ))" >> ${GITHUB_ENV}
        echo "CHASTE_TEST_OUTPUT=${HOME}/testoutput/$(date +'%Y%m%d%H%M%S')" >> ${GITHUB_ENV}
      shell: bash

    - name: Make required directories
      run: |
        mkdir -p ${{ env.modules_dir }}/modulefiles
        mkdir -p ${{ env.CHASTE_TEST_OUTPUT }}
      shell: bash

    - name: Create modules init script
      run: |
        echo "module purge" > modulesinit.sh
        echo "module use ${{ env.modules_dir }}/modulefiles" >> modulesinit.sh
      shell: bash

    - name: Setup xsd
      run: |
        source modulesinit.sh
        err=0 && module test xsd/${{ inputs.xsd_ver }} || err=$?
        if [ $err -ne 0 ]; then
          nice -n ${{ inputs.niceness }} scripts/install_xsd.sh \
            --version=${{ inputs.xsd_ver }} \
            --modules-dir=${{ env.modules_dir }}
          module test xsd/${{ inputs.xsd_ver }}
        fi
      working-directory: ${{ github.workspace }}
      shell: bash --login -e -o pipefail {0}  # login to load /etc/profile.d/modules.sh

    - name: Setup xercesc
      run: |
        source modulesinit.sh
        err=0 && module test xercesc/${{ inputs.xercesc_ver }} || err=$?
        if [ $err -ne 0 ]; then
          nice -n ${{ inputs.niceness }} scripts/install_xercesc.sh \
            --version=${{ inputs.xercesc_ver }} \
            --modules-dir=${{ env.modules_dir }} \
            --parallel=${{ env.parallel }}
          module test xercesc/${{ inputs.xercesc_ver }}
        fi
      working-directory: ${{ github.workspace }}
      shell: bash --login -e -o pipefail {0}  # login to load /etc/profile.d/modules.sh

    - name: Setup sundials
      run: |
        if [ -n "${{ inputs.sundials_ver }}" ]; then
          source modulesinit.sh
          err=0 && module test sundials/${{ inputs.sundials_ver }} || err=$?
          if [ $err -ne 0 ]; then
            nice -n ${{ inputs.niceness }} scripts/install_sundials.sh \
              --version=${{ inputs.sundials_ver }} \
              --modules-dir=${{ env.modules_dir }} \
              --parallel=${{ env.parallel }}
            module test sundials/${{ inputs.sundials_ver }}
          fi
        fi
      working-directory: ${{ github.workspace }}
      shell: bash --login -e -o pipefail {0}  # login to load /etc/profile.d/modules.sh

    - name: Setup boost
      run: |
        source modulesinit.sh
        err=0 && module test boost/${{ inputs.boost_ver }} || err=$?
        if [ $err -ne 0 ]; then
          nice -n ${{ inputs.niceness }} scripts/install_boost.sh \
            --version=${{ inputs.boost_ver }} \
            --modules-dir=${{ env.modules_dir }} \
            --parallel=${{ env.parallel }}
          module test boost/${{ inputs.boost_ver }}
        fi
      working-directory: ${{ github.workspace }}
      shell: bash --login -e -o pipefail {0}  # login to load /etc/profile.d/modules.sh

    - name: Setup vtk
      run: |
        if [ -n "${{ inputs.vtk_ver }}" ]; then
          source modulesinit.sh
          err=0 && module test vtk/${{ inputs.vtk_ver }} || err=$?
          if [ $err -ne 0 ]; then
            nice -n ${{ inputs.niceness }} scripts/install_vtk.sh \
              --version=${{ inputs.vtk_ver }} \
              --modules-dir=${{ env.modules_dir }} \
              --parallel=${{ env.parallel }}
            module test vtk/${{ inputs.vtk_ver }}
          fi
        fi
      working-directory: ${{ github.workspace }}
      shell: bash --login -e -o pipefail {0}  # login to load /etc/profile.d/modules.sh

    - name: Setup petsc_hdf5
      run: |
        source modulesinit.sh
        err=0 && module test petsc_hdf5/${{ inputs.petsc_ver }}_${{ inputs.hdf5_ver }}/${{ inputs.petsc_arch }} || err=$?
        if [ $err -ne 0 ]; then
          nice -n ${{ inputs.niceness }} scripts/install_petsc_hdf5.sh \
            --petsc-version=${{ inputs.petsc_ver }} \
            --hdf5-version=${{ inputs.hdf5_ver }} \
            --petsc-arch=${{ inputs.petsc_arch }} \
            --modules-dir=${{ env.modules_dir }} \
            --parallel=${{ env.parallel }}
          module test petsc_hdf5/${{ inputs.petsc_ver }}_${{ inputs.hdf5_ver }}/${{ inputs.petsc_arch }}
        fi
      working-directory: ${{ github.workspace }}
      shell: bash --login -e -o pipefail {0}  # login to load /etc/profile.d/modules.sh

    - name: Update module init script
      run: |
        echo "module load xsd/${{ inputs.xsd_ver }}" >> modulesinit.sh
        echo "module load xercesc/${{ inputs.xercesc_ver }}" >> modulesinit.sh
        echo "module load boost/${{ inputs.boost_ver }}" >> modulesinit.sh
        echo "module load petsc_hdf5/${{ inputs.petsc_ver }}_${{ inputs.hdf5_ver }}/${{ inputs.petsc_arch }}" >> modulesinit.sh
        
        if [ -n "${{ inputs.sundials_ver }}" ]; then
          echo "module load sundials/${{ inputs.sundials_ver }}" >> modulesinit.sh
        fi
        
        if [ -n "${{ inputs.vtk_ver }}" ]; then
          echo "module load vtk/${{ inputs.vtk_ver }}" >> modulesinit.sh
        fi
      working-directory: ${{ github.workspace }}
      shell: bash

    - name: Checkout Chaste
      uses: actions/checkout@v3
      with:
        repository: Chaste/Chaste
        path: Chaste
        submodules: recursive

    - name: Configure Chaste
      run: |
        source modulesinit.sh
        
        if [ -z "${{ inputs.sundials_ver }}" ]; then
          use_cvode="OFF"
        else
          use_cvode="ON"
        fi
        
        if [ -z "${{ inputs.vtk_ver }}" ]; then
          use_vtk="OFF"
        else
          use_vtk="ON"
        fi

        mkdir -p Chaste/build
        cd Chaste/build
        nice -n ${{ inputs.niceness }} cmake \
          -DBoost_NO_BOOST_CMAKE=ON \
          -DBoost_NO_SYSTEM_PATHS=ON \
          -DBOOST_ROOT=${BOOST_ROOT} \
          -DChaste_USE_CVODE=${use_cvode} \
          -DChaste_USE_VTK=${use_vtk} \
          -DCMAKE_PREFIX_PATH="${XERCESC_ROOT};${XSD_ROOT};${SUNDIALS_ROOT};${VTK_ROOT}" \
          -DCMAKE_BUILD_TYPE=Release \
          ..
      working-directory: ${{ github.workspace }}
      shell: bash --login -e -o pipefail {0}  # login to load /etc/profile.d/modules.sh

    - name: Compile Chaste build info
      run: |
        source modulesinit.sh
        cd Chaste/build
        nice -n ${{ inputs.niceness }} cmake --build . --parallel ${{ env.parallel }} --target TestChasteBuildInfo
        nice -n ${{ inputs.niceness }} ctest -V -R TestChasteBuildInfo --output-on-failure | tee buildinfo
      working-directory: ${{ github.workspace }}
      shell: bash --login -e -o pipefail {0}  # login to load /etc/profile.d/modules.sh

    - name: Verify Chaste dependency versions
      run: |
        cd Chaste/build
        sed -i.bak 's/"//g' buildinfo  # removes quotes from old sundials versions

        maj_min_rev='^[0-9]\+\.[0-9]\+\.[0-9]\+'
        maj_min='^[0-9]\+\.[0-9]\+'

        xsd_ver="$(echo ${{ inputs.xsd_ver }} | grep -o ${maj_min_rev})"
        grep "<XSD>${xsd_ver}</XSD>" buildinfo
        
        xercesc_ver="$(echo ${{ inputs.xercesc_ver }} | grep -o ${maj_min_rev})"
        grep "<Xerces>${xercesc_ver}</Xerces>" buildinfo
        
        if [ -n "${{ inputs.sundials_ver }}" ]; then
          sundials_ver="$(echo ${{ inputs.sundials_ver }} | grep -o ${maj_min_rev})"
          grep "<SUNDIALS>${sundials_ver}</SUNDIALS>" buildinfo
        fi
        
        boost_ver="$(echo ${{ inputs.boost_ver }} | grep -o ${maj_min_rev})"
        grep "<Boost>${boost_ver}</Boost>" buildinfo
        
        if [ -n "${{ inputs.vtk_ver }}" ]; then
          vtk_ver="$(echo ${{ inputs.vtk_ver }} | grep -o ${maj_min})"
          grep "<VTK>${vtk_ver}</VTK>" buildinfo
        fi
        
        petsc_ver="$(echo ${{ inputs.petsc_ver }} | grep -o ${maj_min_rev})"
        grep "<PETSc>${petsc_ver}</PETSc>" buildinfo
        
        hdf5_ver="$(echo ${{ inputs.hdf5_ver }} | grep -o ${maj_min_rev})"
        grep "<HDF5>${hdf5_ver}</HDF5>" buildinfo
      working-directory: ${{ github.workspace }}
      shell: bash

    - name: Build Chaste all target
      run: |
        source modulesinit.sh
        cd Chaste/build
        nice -n ${{ inputs.niceness }} cmake --build . --parallel ${{ env.parallel }} --target all
      working-directory: ${{ github.workspace }}
      shell: bash --login -e -o pipefail {0}  # login to load /etc/profile.d/modules.sh

    - name: Run Continuous test pack
      run: |
        source modulesinit.sh
        cd Chaste/build
        nice -n ${{ inputs.niceness }} ctest -j ${{ env.parallel }} -L Continuous --output-on-failure
      working-directory: ${{ github.workspace }}
      shell: bash --login -e -o pipefail {0}  # login to load /etc/profile.d/modules.sh

    - name: Run Nightly test pack
      run: |
        source modulesinit.sh
        cd Chaste/build
        nice -n ${{ inputs.niceness }} ctest -j ${{ env.parallel }} -L Nightly --output-on-failure
      working-directory: ${{ github.workspace }}
      shell: bash --login -e -o pipefail {0}  # login to load /etc/profile.d/modules.sh

    - name: Run Parallel test pack
      run: |
        source modulesinit.sh
        cd Chaste/build
        nice -n ${{ inputs.niceness }} ctest -j ${{ env.parallel }} -L Parallel --output-on-failure
      working-directory: ${{ github.workspace }}
      shell: bash --login -e -o pipefail {0}  # login to load /etc/profile.d/modules.sh

    - name: Cleanup
      if: always()
      run: rm -rf ${{ env.modules_dir }}/src/*
      working-directory: ${{ github.workspace }}
      shell: bash --login -e -o pipefail {0}  # login to load /etc/profile.d/modules.sh
